{"version":3,"sources":["typings/index.ts","components/Charts/Axis.tsx","components/Charts/Rect.tsx","components/Charts/BarChart.tsx","inversify/inversifyTypes.ts","serivces/DateHelper.ts","serivces/IndexedDBHelper.ts","serivces/HistoryModel.ts","serivces/TodoListModel.ts","components/TodoList/TodoListStore.ts","inversify/inverisfyContainer.ts","shared/hooks/useInject.ts","components/InputFile.tsx","components/Tabulation/Tabulation.tsx","components/Task/Task.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["Tabulation","XAxis","top","bottom","left","height","right","scale","axis","useRef","useEffect","d3","current","call","className","ref","transform","YAxis","colors","format","Rect","data","x","y","value","dayOfWeek","width","bandwidth","fill","date","textAnchor","alignmentBaseline","fontSize","Bar","props","axisPadding","range","domain","map","d","paddingInner","i","SERVICE_IDENTIFIER","TodoListStore","Symbol","for","IndexedDBHelper","TodoListModel","HistoryModel","Intl","DateTimeFormat","year","month","day","injectable","_dbName","_version","_db","init","tableName","a","remove","index","delete","write","list","clearAll","tx","transaction","store","objectStore","clear","item","put","done","update","todo","getData","getAll","openDB","upgrade","db","oldVersion","newVersion","createObjectStore","keyPath","getDefaultHistoryRecord","getDay","changeTaskStatus","newTaskStatus","currentDate","Date","get","undefined","todayRecord","completedTaskCount","Math","max","getNewDataArray","newData","historyIndex","findIndex","task","newCompletedTaskCount","createDataIfNotExists","length","tempDate","setDate","getDate","dateKey","allRecords","slice","currentTab","All","tabularData","this","onCreating","newTitle","_todoDB","_historyDB","historyData","_tableNameList","_tableNameHistory","initDb","Promise","all","history","onTabChange","New","filter","el","completed","Completed","onChangeCheckbox","dataId","event","checked","id","updateHistoryData","onTypingNewInput","setCreating","state","createNewTask","newElem","title","push","removeTask","loadFile","todolist","container","makeObservable","observable","action","Container","useInject","useState","bind","to","inSingletonScope","FileUploader","todoStore","style","marginTop","type","onChange","target","files","file","reader","FileReader","addEventListener","result","JSON","parse","readAsText","observer","tabStore","Tabs","tabNumber","Tab","label","TaskCreator","onCreatingBlock","Input","Button","onClick","color","variant","TodoList","List","isSuccess","ListItem","Checkbox","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","App","Grid","justify","direction","alignItems","maxWidth","marginLeft","marginRight","ETabulation","Typography","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.422e3ea3.chunk.js","sourcesContent":["export type Status = 'success' | 'new';\n\nexport type TodoData = {\n    // status: Status;\n    id: number;\n    completed: boolean;\n    title: string;\n};\n\nexport enum Tabulation {\n    All = 0,\n    New = 1,\n    Completed = 2,\n}\n\nexport type BarChartData = {\n    value: number;\n    dayOfWeek: string;\n    date: string;\n};\n","import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\n\nexport const XAxis = ({ top, bottom, left, right, height, scale }) => {\n    const axis = useRef(null);\n\n    useEffect(() => {\n        d3.select(axis.current).call(d3.axisBottom(scale) as any);\n    });\n\n    return <g className=\"axis x\" ref={axis} transform={`translate(${left}, ${height - bottom})`} />;\n};\n\nexport const YAxis = ({ top, bottom, left, right, scale }) => {\n    const axis = useRef(null);\n\n    useEffect(() => {\n        d3.select(axis.current).call(d3.axisLeft(scale) as any);\n    });\n\n    return <g className=\"axis y\" ref={axis} transform={`translate(${left}, ${top})`} />;\n};\n","import { ScaleBand, ScaleLinear } from 'd3-scale';\nimport { BarChartData } from 'typings';\nimport * as d3 from 'd3';\n\ntype RectProps = {\n    data: BarChartData;\n    x: ScaleBand<string>;\n    y: ScaleLinear<number, number, never>;\n    top: number;\n    bottom: number;\n    height: number;\n};\n\nconst colors = d3.scaleOrdinal(d3.schemeCategory10);\nconst format = d3.format('.2f');\n\nexport const Rect = ({ data, x, y, height, top, bottom }: RectProps) => {\n    const value = data.value;\n    return (\n        <g transform={`translate(${x(data.dayOfWeek)}, ${y(value)})`}>\n            <rect width={x.bandwidth()} height={height - bottom - top - y(value)} fill={colors(data.date)} />\n            <text\n                transform={`translate(${x.bandwidth() / 2}, ${-2})`}\n                textAnchor=\"middle\"\n                alignmentBaseline=\"baseline\"\n                fill=\"grey\"\n                fontSize=\"10\"\n            >\n                {format(value)}\n            </text>\n        </g>\n    );\n};\n","import * as d3 from 'd3';\nimport React from 'react';\nimport { BarChartData } from 'typings';\nimport { XAxis, YAxis } from './Axis';\nimport { Rect } from './Rect';\n\nexport type BarProps = {\n    data: BarChartData[];\n    width: number;\n    height: number;\n};\n\nexport const Bar = (props: BarProps) => {\n    const axisPadding = 30;\n    const rightPadding = 0;\n    const topPadding = 20;\n    const data = props.data;\n\n    const x = d3\n        .scaleBand()\n        .range([0, props.width - axisPadding - rightPadding])\n        .domain(data.map((d) => d.dayOfWeek))\n        .paddingInner(0.1);\n\n    const y = d3\n        .scaleLinear()\n        .range([props.height - topPadding - axisPadding, 0])\n        .domain([0, d3.max(data, (d) => d.value)!]);\n\n    return (\n        <>\n            <svg width={props.width} height={props.height}>\n                <XAxis\n                    scale={x}\n                    top={topPadding}\n                    bottom={axisPadding}\n                    left={axisPadding}\n                    right={rightPadding}\n                    height={props.height}\n                />\n                <YAxis scale={y} top={topPadding} bottom={axisPadding} left={axisPadding} right={rightPadding} />\n                <g transform={`translate(${axisPadding}, ${topPadding})`}>\n                    {data.map((d, i) => (\n                        <Rect\n                            data={d}\n                            x={x}\n                            y={y}\n                            key={d.date}\n                            top={topPadding}\n                            bottom={axisPadding}\n                            height={props.height}\n                        />\n                    ))}\n                </g>\n            </svg>\n        </>\n    );\n};\n","export const SERVICE_IDENTIFIER = {\n    TodoListStore: Symbol.for('TodoListStore'),\n    IndexedDBHelper: Symbol.for('IndexedDBHelper'),\n    TodoListModel: Symbol.for('TodoListModel'),\n    HistoryModel: Symbol.for('HistoryModel'),\n};\n","export const dayOfWeek = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\n\nexport const format = (date: Date) => {\n    return new Intl.DateTimeFormat('en-En', { year: 'numeric', month: 'numeric', day: 'numeric' }).format(date);\n};\n","import { IDBPDatabase } from 'idb';\nimport { injectable } from 'inversify';\nimport { TodoData } from 'typings';\n\n@injectable()\nexport abstract class IndexedDBHelper<TDto> {\n    protected _dbName = 'todo';\n    protected _version = 3;\n    protected _db: IDBPDatabase | null = null;\n\n    public abstract init = async (tableName: string) => {};\n\n    public remove = async (tableName: string, index: number) => {\n        await this._db?.delete(tableName, index);\n    };\n\n    public write = async (tableName: string, list: TDto[], clearAll = false) => {\n        if (this._db === null) {\n            return null;\n        }\n\n        const tx = this._db.transaction([tableName], 'readwrite');\n        const store = tx.objectStore(tableName);\n        if (clearAll) {\n            await store.clear();\n        }\n\n        for (const item of list) {\n            if (store.put) {\n                store.put(item);\n            }\n        }\n        await tx.done;\n    };\n\n    public update = async (tableName: string, todo: TDto) => {\n        await this._db?.put(tableName, { ...todo });\n    };\n\n    public getData = async (tableName: string): Promise<TDto[]> => {\n        if (this._db === null) {\n            return [];\n        }\n\n        return await this._db.getAll(tableName);\n    };\n}\n","import { openDB } from 'idb';\nimport { BarChartData } from 'typings';\nimport { dayOfWeek, format } from './DateHelper';\nimport { IndexedDBHelper } from './IndexedDBHelper';\n\nexport class HistoryModel extends IndexedDBHelper<BarChartData> {\n    protected _dbName = 'history';\n\n    public init = async (tableName: string) => {\n        this._db = await openDB(this._dbName, this._version, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                db.createObjectStore(tableName, { keyPath: 'date' });\n            },\n        });\n    };\n\n    public getDefaultHistoryRecord = (date: Date): BarChartData => {\n        return { value: 0, date: format(date), dayOfWeek: dayOfWeek[date.getDay()] };\n    };\n\n    public changeTaskStatus = async (tableName: string, newTaskStatus: boolean) => {\n        const currentDate = new Date();\n\n        let todayRecord: BarChartData | undefined = await this._db?.get(tableName, format(currentDate));\n\n        if (todayRecord === undefined) {\n            todayRecord = this.getDefaultHistoryRecord(currentDate);\n        }\n\n        const completedTaskCount = newTaskStatus ? todayRecord.value + 1 : todayRecord.value - 1;\n        this._db?.put(tableName, { ...todayRecord, value: Math.max(completedTaskCount, 0) });\n    };\n\n    public getNewDataArray = (data: BarChartData[], newTaskStatus: boolean) => {\n        const newData = [...data];\n        const historyIndex = newData.findIndex((task) => task.date === format(new Date()));\n        const completedTaskCount = newData[historyIndex].value;\n        const newCompletedTaskCount = newTaskStatus ? completedTaskCount + 1 : completedTaskCount - 1;\n\n        newData[historyIndex].value = Math.max(newCompletedTaskCount, 0);\n        return newData;\n    };\n\n    public createDataIfNotExists = async (tableName: string) => {\n        const currentDate = new Date();\n\n        for (let day = 0; day < dayOfWeek.length; day++) {\n            const tempDate = new Date();\n            tempDate.setDate(currentDate.getDate() - day);\n\n            const dateKey = format(tempDate);\n            const todayRecord = await this._db?.get(tableName, dateKey);\n            if (todayRecord === undefined) {\n                await this._db?.put(tableName, this.getDefaultHistoryRecord(tempDate));\n            }\n        }\n    };\n\n    public getAll = async (tableName: string): Promise<BarChartData[]> => {\n        const allRecords = await this._db?.getAll(tableName);\n        if (allRecords === undefined) {\n            return [];\n        }\n\n        return allRecords.slice(-dayOfWeek.length); // получим 7 последних  записей\n    };\n}\n","import { openDB } from 'idb';\nimport { injectable } from 'inversify';\nimport { TodoData } from 'typings';\nimport { IndexedDBHelper } from './IndexedDBHelper';\n\n@injectable()\nexport class TodoListModel extends IndexedDBHelper<TodoData> {\n    public init = async (tableName: string) => {\n        this._db = await openDB(this._dbName, this._version, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                db.createObjectStore(tableName, { keyPath: 'id' });\n            },\n        });\n    };\n}\n","import { injectable } from 'inversify';\nimport { container } from 'inversify/inverisfyContainer';\nimport { SERVICE_IDENTIFIER } from 'inversify/inversifyTypes';\nimport { action, makeObservable, observable } from 'mobx';\nimport { HistoryModel } from 'serivces/HistoryModel';\nimport { TodoListModel } from 'serivces/TodoListModel';\nimport { BarChartData, TodoData } from '../../typings';\nimport { Tabulation } from '../../typings/index';\n\n@injectable()\nexport class TodoListStore {\n    public data: TodoData[] = [];\n    public currentTab: Tabulation = Tabulation.All;\n    public tabularData = this.data;\n    public onCreating = false;\n    public newTitle = '';\n    private _todoDB: TodoListModel;\n    private _historyDB: HistoryModel;\n    public historyData: BarChartData[] = [];\n\n    private _tableNameList = 'todolist';\n    protected _tableNameHistory = 'history';\n\n    constructor() {\n        this._todoDB = container.get<TodoListModel>(SERVICE_IDENTIFIER.TodoListModel);\n        this._historyDB = container.get<HistoryModel>(SERVICE_IDENTIFIER.HistoryModel);\n\n        makeObservable(this, {\n            data: observable,\n            onChangeCheckbox: action,\n            onTabChange: action,\n            currentTab: observable,\n            tabularData: observable,\n            onCreating: observable,\n            createNewTask: action,\n            setCreating: action,\n            initDb: action,\n            historyData: observable,\n            updateHistoryData: action,\n        });\n        this.initDb();\n    }\n\n    public initDb = async () => {\n        await Promise.all([this._todoDB.init(this._tableNameList), this._historyDB.init(this._tableNameHistory)]);\n\n        await this._historyDB.createDataIfNotExists(this._tableNameHistory);\n\n        const [data, history] = await Promise.all([\n            this._todoDB.getData(this._tableNameList),\n            this._historyDB.getAll(this._tableNameHistory),\n        ]);\n        this.data = data;\n        this.historyData = history;\n\n        this.onTabChange(this.currentTab);\n    };\n\n    public onTabChange = (value: Tabulation) => {\n        this.currentTab = value;\n\n        if (value === Tabulation.All) {\n            this.tabularData = this.data;\n        } else if (value === Tabulation.New) {\n            this.tabularData = this.data.filter((el) => el.completed === false);\n        } else if (value === Tabulation.Completed) {\n            this.tabularData = this.data.filter((el) => el.completed === true);\n        }\n    };\n\n    public onChangeCheckbox = (dataId: number) => (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        const index = this.data.findIndex((el) => el.id === dataId);\n        this.data[index].completed = checked;\n        this._todoDB.update(this._tableNameList, this.data[index]);\n\n        this._historyDB.changeTaskStatus(this._tableNameHistory, checked);\n        this.onTabChange(this.currentTab);\n\n        this.updateHistoryData(checked);\n    };\n\n    public updateHistoryData = (checked: boolean) => {\n        this.historyData = this._historyDB.getNewDataArray(this.historyData, checked);\n    };\n\n    public onTypingNewInput = (value: string) => {\n        this.newTitle = value;\n    };\n\n    public setCreating = (state: boolean) => {\n        this.onCreating = state;\n    };\n\n    public createNewTask = () => {\n        const maxId = Math.max(...this.data.map((el) => el.id));\n        const newElem = { id: maxId + 1, completed: false, title: this.newTitle };\n        this.data.push(newElem);\n        this.onTabChange(this.currentTab);\n        this._todoDB.write(this._tableNameList, [newElem]);\n\n        this.onCreating = false;\n        this.newTitle = '';\n    };\n\n    public removeTask = (id: number) => {\n        this.data = this.data.filter((task) => id !== task.id);\n        this._todoDB.remove(this._tableNameList, id);\n        this.onTabChange(this.currentTab);\n    };\n\n    public loadFile = (todolist: TodoData[]) => {\n        this.data = todolist;\n        this.onTabChange(this.currentTab);\n        const clearAll = true;\n        this._todoDB.write(this._tableNameList, todolist, clearAll);\n    };\n}\n","import { Container } from 'inversify';\nimport 'reflect-metadata';\nimport { HistoryModel } from 'serivces/HistoryModel';\nimport { TodoListModel } from 'serivces/TodoListModel';\nimport { TodoListStore } from '../components/TodoList/TodoListStore';\nimport { SERVICE_IDENTIFIER } from './inversifyTypes';\n\nexport const container = new Container();\ncontainer.bind(SERVICE_IDENTIFIER.TodoListStore).to(TodoListStore).inSingletonScope();\ncontainer.bind(SERVICE_IDENTIFIER.HistoryModel).to(HistoryModel).inSingletonScope();\ncontainer.bind(SERVICE_IDENTIFIER.TodoListModel).to(TodoListModel).inSingletonScope();\n","import { useState } from 'react';\nimport { container } from '../../inversify/inverisfyContainer';\n\nexport function useInject<T>(id: string | symbol): T {\n    const [store, setStore] = useState(() => {\n        return container.get<T>(id);\n    });\n    return store;\n}\n","import { SERVICE_IDENTIFIER } from 'inversify/inversifyTypes';\nimport React, { ChangeEvent } from 'react';\nimport { useInject } from 'shared/hooks/useInject';\nimport { TodoListStore } from './TodoList/TodoListStore';\n\nexport type FileUploaderProps = {};\n\nexport const FileUploader = (props: FileUploaderProps) => {\n    const todoStore = useInject<TodoListStore>(SERVICE_IDENTIFIER.TodoListStore);\n\n    const handleFileInput = (event: ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files && event.target.files.length !== 0) {\n            const file = event.target.files[0];\n\n            const reader = new FileReader();\n            reader.addEventListener('load', (event) => {\n                if (!event.target || !event.target.result) {\n                    return false;\n                }\n                const data = JSON.parse(event.target.result as string);\n                todoStore.loadFile(data);\n            });\n            reader.readAsText(file);\n        }\n    };\n    return (\n        <div style={{ marginTop: 50 }}>\n            <input type=\"file\" onChange={handleFileInput} />\n        </div>\n    );\n};\n","import Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport { TodoListStore } from 'components/TodoList/TodoListStore';\nimport { observer } from 'mobx-react';\nimport { SERVICE_IDENTIFIER } from '../../inversify/inversifyTypes';\nimport { useInject } from '../../shared/hooks/useInject';\n\nexport const Tabulation = observer(() => {\n    const tabStore = useInject<TodoListStore>(SERVICE_IDENTIFIER.TodoListStore);\n    return (\n        <Tabs value={tabStore.currentTab} onChange={(event, tabNumber) => tabStore.onTabChange(tabNumber)}>\n            <Tab label=\"Все\" />\n            <Tab label=\"Новые\" />\n            <Tab label=\"Выполненные\" />\n        </Tabs>\n    );\n});\n","import { Button, Input } from '@material-ui/core';\nimport { TodoListStore } from 'components/TodoList/TodoListStore';\nimport { SERVICE_IDENTIFIER } from 'inversify/inversifyTypes';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { useInject } from 'shared/hooks/useInject';\n\nexport const TaskCreator = observer(() => {\n    const todoStore = useInject<TodoListStore>(SERVICE_IDENTIFIER.TodoListStore);\n\n    const onCreatingBlock = (\n        <div>\n            <Input onChange={(event) => todoStore.onTypingNewInput(event.target.value)} />\n            <div style={{ marginTop: 10 }}>\n                <Button onClick={() => todoStore.createNewTask()}>Добавить</Button>\n                <Button onClick={() => todoStore.setCreating(false)}>Отменить</Button>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            {!todoStore.onCreating && (\n                <Button color=\"secondary\" variant=\"contained\" onClick={() => todoStore.setCreating(true)}>\n                    +\n                </Button>\n            )}\n\n            {todoStore.onCreating && onCreatingBlock}\n        </>\n    );\n});\n","import { IconButton, ListItemText } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { SERVICE_IDENTIFIER } from '../../inversify/inversifyTypes';\nimport { useInject } from '../../shared/hooks/useInject';\nimport './TodoList.css';\nimport { TodoListStore } from './TodoListStore';\n\nexport type TodoListProps = {};\n\nexport const TodoList = observer((props: TodoListProps) => {\n    const todoStore = useInject<TodoListStore>(SERVICE_IDENTIFIER.TodoListStore);\n\n    return (\n        <List>\n            {todoStore.tabularData.map((el, i) => {\n                const isSuccess = el.completed;\n                return (\n                    <ListItem className={isSuccess ? 'success' : 'new'} key={el.title}>\n                        <Checkbox checked={isSuccess} onChange={todoStore.onChangeCheckbox(el.id)} />\n                        <ListItemText primary={el.title} />\n\n                        <ListItemSecondaryAction>\n                            <IconButton edge=\"end\" onClick={() => todoStore.removeTask(el.id)}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n});\n","import { Grid } from '@material-ui/core';\nimport { Bar } from 'components/Charts/BarChart';\nimport { FileUploader } from 'components/InputFile';\nimport { Tabulation } from 'components/Tabulation/Tabulation';\nimport { TaskCreator } from 'components/Task/Task';\nimport { TodoListStore } from 'components/TodoList/TodoListStore';\nimport { SERVICE_IDENTIFIER } from 'inversify/inversifyTypes';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { useInject } from 'shared/hooks/useInject';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Tabulation as ETabulation } from './typings/index';\nimport Typography from '@material-ui/core/Typography';\n\nconst App = observer(() => {\n    const todoStore = useInject<TodoListStore>(SERVICE_IDENTIFIER.TodoListStore);\n\n    return (\n        <Grid\n            container\n            justify=\"center\"\n            direction=\"column\"\n            alignItems=\"center\"\n            style={{ maxWidth: 1000, marginLeft: 'auto', marginRight: 'auto' }}\n        >\n            <Grid item>\n                <Tabulation />\n            </Grid>\n\n            <Grid item>\n                <TodoList />\n            </Grid>\n\n            <Grid item>\n                <TaskCreator />\n            </Grid>\n\n            {todoStore.currentTab === ETabulation.Completed && (\n                <Grid item>\n                    <Bar data={todoStore.historyData} width={500} height={300} />\n                </Grid>\n            )}\n\n            <Grid item style={{ marginTop: 40 }}>\n                <Typography variant=\"h5\" component=\"h5\">\n                    Для обновления задач из файла, загрузите его (все существующие задачи удалятся){' '}\n                </Typography>\n                <FileUploader />\n            </Grid>\n        </Grid>\n    );\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}